ometa JSON {
    root = value:a end -> a,

    value = @spaces? (object | array | string | number | boolean):v @spaces? -> v,

    object = "{" pair:l ( "," pair )*:r "}" -> [l].concat(r).reduce(function (acc, e) {
            acc[e[0]] = e[1];
            return acc;
        }, {})
        | "{" "}" -> new Object(),

    pair = @spaces? string:s @spaces? ":" value:a -> [s, a],

    array = "[" value:l ("," value)*:r "]" -> { r ? [l].concat(r) : [l] }
        | "[" @spaces? "]" -> [],

    string = "\"" (~'"' character)*:s "\"" -> s.join(''),

    character = escape | <~/[\t\n\r\f\v]/ char>,

    escape = '\\' (
        '"' | '\'' | '\\' | '/'
        | 'b' -> '\b'
        | 'f' -> '\f'
        | 'n' -> '\n'
        | 'r' -> '\r'
        | 't' -> '\t'
        | 'u' <hex hex hex hex>:s -> String.fromCharCode(parseInt(s, 16)) |
        { this._getError() }
    ):v -> v,

    hex = /[0-9A-Fa-f]/,

    number = float | int,

    float = <sign? digit+ ('.' digit* exp? | exp)>:n -> parseFloat(n),

    int = <sign? /[1-9]/ digit*>:n -> parseInt(n, 10)
        | '0',

    sign = /\+|-/,

    exp = /[Ee]/ sign? digit+,

    boolean = "true" -> true | "false" -> false | "null" -> null,

    spaces = /[ \t\f\r\n\v]+/,

    token = @spaces? /true|false|null|:|"|'|\{|\}|\[|\]|,/:t -> [ t, t ]
}

JSON.parse = function parse(s) {
    return this.matchAll(s, 'root');
};

module.exports = JSON;
